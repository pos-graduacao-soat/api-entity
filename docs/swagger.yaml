openapi: "3.0.2"
info:
  version: 1.0.0
  title: API Entity
  description: >
    **Service responsible for CRUD operations of Products and Customers**
paths:
  /customers:
    post:
      tags:
        - Customers
      summary: Create a new customer
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/CustomerToCreateSchema"
            examples:
              Example1:
                value:
                  name: "Gabriel"
                  documentNumber: "16349914007"
                  email: "gabriel@email.com"
      responses:
        200:
          description: Customer registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/CreatedCustomerSchema"
                  message:
                    type: string
                    description: Sucess
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /customers/{customerId}:
    get:
      tags:
        - Customers
      summary: Get customer by id
      parameters:
        - name: customerId
          in: path
          required: true
          description: Customer id
          schema:
            type: string
      responses:
        200:
          description: Customer found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/CreatedCustomerSchema"
                  message:
                    type: string
                    description: Sucess
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /products:
    post:
      tags:
        - Products
      summary: Create new product
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductToCreateSchema"
      responses:
        200:
          description: Product created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/CreatedProductSchema"
                  message:
                    type: string
                    description: Sucess
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
    get:
      tags:
        - Products
      summary: Product listing
      parameters:
        - name: category
          in: query
          required: false
          description: Product category
          schema:
            type: string
            enum:
              - Beverages
              - MainCourses
              - SideDishes
              - Desserts
      responses:
        200:
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CreatedProductSchema"
                  message:
                    type: string
                    description: Sucess
        500:
          $ref: "#/components/responses/InternalServerError"
  /products/{id}:
    patch:
      tags:
        - Products
      summary: Update existing product
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ProductToUpdateSchema"
            examples:
              Example1:
                value:
                  name: "X-Baconzinho"
                  category: "MainCourse"
                  description: "Pão, hambúrguer, queijo, bacon, alface e tomate"
                  price: 20.0
                  image: "/link/da/imagem"
      responses:
        200:
          description: Product updated
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/CreatedProductSchema"
                  message:
                    type: string
                    description: Sucess
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

    get:
      tags:
        - Products
      summary: Get product by id
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        200:
          description: Product #/components/responses/NotFound"
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: "#/components/schemas/CreatedProductSchema"
                  message:
                    type: string
                    description: Success
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /products/ids:
    get:
      tags:
        - Products
      summary: Get products by ids
      parameters:
        - name: ids
          in: query
          required: true
          description: Product IDs separated by comma
          schema:
            type: string
      responses:
        200:
          description: Products found
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CreatedProductSchema"
                  message:
                    type: string
                    description: Success
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
components:
  schemas:
    CreatedCustomerSchema:
      type: object
      description: Full properties of a customer.
      properties:
        id:
          type: string
          description: Customer id.
        documentNumber:
          type: string
          description: Person's CPF number.
        name:
          type: string
          description: Person's name.
        email:
          type: string
          description: Person's email.
        createdAt:
          type: string
          format: date-time
          description: Customer creation date.
        updatedAt:
          type: string
          format: date-time
          description: Customer update date.
    CreatedProductSchema:
      type: object
      description: Full properties of a product.
      properties:
        id:
          type: string
          description: Product id.
        name:
          type: string
          description: Product name.
        description:
          type: string
          description: Product description.
        category:
          type: string
          description: Product category.
        price:
          type: number
          description: Product price.
        createdAt:
          type: string
          format: date-time
          description: Product creation date.
        updatedAt:
          type: string
          format: date-time
          description: Product update date.
    CustomerToCreateSchema:
      type: object
      description: Properties to create a product.
      properties:
        documentNumber:
          type: string
          description: Person's CPF number.
        name:
          type: string
          description: Person's name.
        email:
          type: string
          description: Person's email.
    ProductToCreateSchema:
      type: object
      description: Properties to create a product.
      required:
        - name
        - category
        - description
        - price
      properties:
        name:
          type: string
          description: Product name.
        description:
          type: string
          description: Product description.
        category:
          type: string
          description: Product category.
          enum:
            - Beverages
            - MainCourses
            - SideDishes
            - Desserts
        price:
          type: number
          description: Product price.
    ProductToUpdateSchema:
      type: object
      description: Properties to update a product.
      properties:
        name:
          type: string
          description: Product name.
        description:
          type: string
          description: Product description.
        category:
          type: string
          description: Product category.
          enum:
            - Beverages
            - MainCourses
            - SideDishes
            - Desserts
        price:
          type: number
          description: Product price.
  responses:
    BadRequest:
      description: Invalid Request
      content:
        "application/json":
          schema:
            properties:
              data:
                type: object
                properties:
                  stack:
                    type: string
              message:
                type: string
                title: Error message
                description: Describes a message informing a reason for the error
                example: "Email required"
    NotFound:
      description: Entidade nao encontrada
      content:
        "application/json":
          schema:
            properties:
              data:
                type: object
                properties:
                  stack:
                    type: string
              message:
                type: string
                title: Mensagem de erro
                description: Descreve a mensagem informando o motivo do erro
                example: "Not Found"
    InternalServerError:
      description: Internal server error
      content:
        "application/json":
          schema:
            properties:
              data:
                type: object
                properties:
                  stack:
                    type: string
              message:
                type: string
                title: Error message
                description: Describes a message informing a reason for the error
                example: "Internal Server Error"
